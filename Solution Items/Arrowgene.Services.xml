<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arrowgene.Services</name>
    </assembly>
    <members>
        <member name="T:Arrowgene.Services.Common.OS">
            <summary>
            Dealing with OS
            </summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.UNKNOWN">
            <summary>UNKNOWN</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_3_1">
            <summary>WIN_3_1</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_95">
            <summary>WIN_95</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_98">
            <summary>WIN_98</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_ME">
            <summary>WIN_ME</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_NT_3_5">
            <summary>WIN_NT_3_5</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_NT_4">
            <summary>WIN_NT_4</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_2000">
            <summary>WIN_2000</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_XP">
            <summary>WIN_XP</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_2003">
            <summary>WIN_2003</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_VISTA">
            <summary>WIN_VISTA</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_2008">
            <summary>WIN_2008</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_7">
            <summary>WIN_7</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_2008_R2">
            <summary>WIN_2008_R2</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_8">
            <summary>WIN_8</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_8_1">
            <summary>WIN_8_1</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_10">
            <summary>WIN_10</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.WIN_CE">
            <summary>WIN_CE</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.UNIX">
            <summary>UNIX</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.XBOX">
            <summary>XBOX</summary>
        </member>
        <member name="F:Arrowgene.Services.Common.OS.OsVersion.MAX_OSX">
            <summary>MAX_OSX</summary>
        </member>
        <member name="M:Arrowgene.Services.Common.OS.GetOperatingSystemVersion">
            <summary>
            Returns version of OS.
            </summary>
            <returns>
            Returns <see cref="T:Arrowgene.Services.Common.OS.OsVersion"/>.
            </returns>
            <remarks>
            In order to detect cetain windows versions,
            it is necessary to add a custom .manifest file to the project.
            https://msdn.microsoft.com/en-us/library/windows/desktop/dn481241%28v=vs.85%29.aspx
            Otherwise win 8.1 will be reconized as win 8.0 for example.
            </remarks>
        </member>
        <member name="M:Arrowgene.Services.Common.Search.Find(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Find subarray in the source array.
            </summary>
            <param name="array">Source array to search for needle.</param>
            <param name="needle">Needle we are searching for.</param>
            <param name="startIndex">Start index in source array.</param>
            <param name="sourceLength">Number of bytes in source array, where the needle is searched for.</param>
            <returns>Returns starting position of the needle if it was found or <b>-1</b> otherwise.</returns>
        </member>
        <member name="T:Arrowgene.Services.Common.IP">
            <summary>
            Helps with IPAddress
            </summary>
        </member>
        <member name="F:Arrowgene.Services.Common.IP.USE_IPV6_ONLY">
             <summary>
            https://msdn.microsoft.com/en-us/library/system.net.sockets.socketoptionname.aspx
             IPv6Only	
             Indicates if a socket created for the AF_INET6 address family is restricted to IPv6 communications only.
             Sockets created for the AF_INET6 address family may be used for both IPv6 and IPv4 communications.
             Some applications may want to restrict their use of a socket created for the AF_INET6 address family to IPv6 communications only.
             When this value is non-zero (the default on Windows), a socket created for the AF_INET6 address family can be used to send and receive IPv6 packets only.
             When this value is zero, a socket created for the AF_INET6 address family can be used to send and receive packets to and from an IPv6 address or an IPv4 address.
             Note that the ability to interact with an IPv4 address requires the use of IPv4 mapped addresses.
             This socket option is supported on Windows Vista or later.
             </summary>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.QueryRoutingInterface(System.Net.IPAddress)">
            <summary>
            Determines most possible local <see cref="T:System.Net.IPEndPoint"/> for connecting to the specified <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="remoteIp"></param>
            <returns></returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.FindNetworkInterface(System.Net.IPAddress)">
            <summary>
            Determines the <see cref="T:System.Net.NetworkInformation.NetworkInterface"/> of the specified <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.GetMacAddress(System.Net.IPAddress)">
            <summary>
            Try to get mac for ip, if not possible get the next best mac.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.GetMacAddress">
            <summary>
            Try to get the next best mac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.AddressLookup(System.String)">
            <summary>
            Returns IP Address for given hostname.
            If Supported, returns IPv6 IP, 
            if no IPv6 IP was found or IPv6 is not Supported,
            it will try to return a IPv4 IP address.
            </summary>
            <param name="hostname">Name of host.</param>
            <returns>
            Returns <see cref="T:System.Net.IPAddress"/> on success,
            null on failure
            </returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.AddressLocalhost(System.Net.Sockets.AddressFamily)">
            <summary>
            Returns <see cref="T:System.Net.IPAddress"/> of localhost for a given <see cref="T:System.Net.Sockets.AddressFamily"/>
            </summary>
            <param name="addressFamily"></param>
            <returns></returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.AddressLookup(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Returns IP Address for given hostname.
            Tries to return the IP of specified IP version,
            if a IPv6 IP can not be retrived,
            it will be tried to return a IPv4 IP.
            </summary>
            <param name="hostname">Name of host.</param>
            <param name="addressFamily">Specific IP version.</param>
            <returns>
            Returns <see cref="T:System.Net.IPAddress"/> on success,
            null on failure.
            </returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.V6Support">
            <summary>
            Determines wether IPv6 may be supported.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.ConnectTest(System.Net.IPEndPoint,System.TimeSpan)">
            <summary>
            Connects the specified socket.
            </summary>
            <param name="endpoint">The IP endpoint.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Arrowgene.Services.Common.IP.ConnectTest(System.Net.IPAddress,System.Int32,System.TimeSpan)">
            <summary>
            Connects the specified socket.
            </summary>
            <param name="ipAddress">IP endpoint</param>
            <param name="port">Port</param>
            <param name="timeout">timeout</param>
        </member>
        <member name="M:Arrowgene.Services.Common.ByteBuffer.ReadByteBuffer">
            <summary>
            Reads all Bytes
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Common.ByteBuffer.ReadBytes">
            <summary>
            Reads all Bytes
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Common.ByteBuffer.WriteBuffer(Arrowgene.Services.Common.ByteBuffer)">
            <summary>
            Appends all Bytes from buffer
            </summary>
        </member>
        <member name="T:Arrowgene.Services.Common.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Common.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath"></PARAM>
        </member>
        <member name="M:Arrowgene.Services.Common.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <PARAM name="Section"></PARAM>
            Section name
            <PARAM name="Key"></PARAM>
            Key Name
            <PARAM name="Value"></PARAM>
            Value Name
        </member>
        <member name="M:Arrowgene.Services.Common.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="Section"></PARAM>
            <PARAM name="Key"></PARAM>
            <PARAM name="Path"></PARAM>
            <returns></returns>
        </member>
        <member name="T:Arrowgene.Services.Logging.Logger">
            <summary>
            Logging Class</summary>
            <remarks>
            Logs message combined with id and type as <see cref="T:Arrowgene.Services.Logging.Log"/>
            Events for log writings, will only occur if its declared as safe</remarks>
        </member>
        <member name="E:Arrowgene.Services.Logging.Logger.LogWrite">
            <summary>
            Notifies when a <see cref="T:Arrowgene.Services.Logging.Log"/> write occured.
            Don't block this Action by the UI thread, use Dispatcher.BeginInvoke.</summary>
        </member>
        <member name="P:Arrowgene.Services.Logging.Logger.WriteDebug">
            <summary>
            Write Logs to Debug output.
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.Clear">
            <summary>
            Clears all stored <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.Write(Arrowgene.Services.Logging.Log)">
            <summary>
            Writes a new <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
            <param name="log"><see cref="T:Arrowgene.Services.Logging.Log"/></param>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.Write(System.String,System.Object,Arrowgene.Services.Logging.LogType)">
            <summary>
            Writes a new <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
            <param name="log">Message {0}</param>
            <param name="arg0">Argument</param>
            <param name="logType">Log Category</param>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.Write(System.String,System.Object,System.Object,Arrowgene.Services.Logging.LogType)">
            <summary>
            Writes a new <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
            <param name="log">Message {0}</param>
            <param name="arg0">Argument</param>
            <param name="arg1">Argument</param>
            <param name="logType">Log Category</param>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.Write(System.String,Arrowgene.Services.Logging.LogType)">
            <summary>
            Writes a new <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
            <param name="log">Message</param>
            <param name="logType">Log Category</param>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.Write(System.String)">
            <summary>
            Writes a new <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
            <param name="log">Message</param>
        </member>
        <member name="M:Arrowgene.Services.Logging.Logger.GetLogs">
            <summary>
            Receive all <see cref="T:Arrowgene.Services.Logging.Log"/></summary>
            <returns>
            Dictionary containing id associated by <see cref="T:Arrowgene.Services.Logging.Log"/></returns>
        </member>
        <member name="T:Arrowgene.Services.Network.Http.Server.HttpServer">
            <summary>
            Http Server needs admin priveleges
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.Http.Server.HttpServer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.Http.Server.HttpServer.HttpHandleEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.Http.Server.HttpServer.Initialize(System.Int32)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Arrowgene.Services.Network.Http.Server.HttpServer.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Arrowgene.Services.Network.Http.Client.HttpRequest">
            <summary>
            Creates a <see cref="T:System.Net.HttpWebRequest"/> with configureable default values.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.Http.Client.HttpRequest.BufferSize">
            <summary>
            Size of read buffer.
            Bigger size results in fewer copy actions,
            but increases memory allocation.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.Http.Client.HttpRequest.Timeout">
            <summary>
            Timeout in ms to wait till a http response arrives.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.Http.Client.HttpRequest.ExceptionMessage">
            <summary>
            Exception message of the last request.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.Http.Client.HttpRequest.RequestUrl">
            <summary>
            URL of the last request.
            Available after a request.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.Http.Client.HttpRequest.ResponseHeaders">
            <summary>
            Headers of the last response.
            Available after a request.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Client.TCPClient.ServerIPAddress">
            <summary>
            Server <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Client.TCPClient.ServerPort">
            <summary>
            Server port.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Client.TCPClient.Logger">
            <summary>
            Current logging instance where logs get written to.
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Client.TCPClient.Disconnected">
            <summary>
            Occures when a client disconnected.
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Client.TCPClient.Connected">
            <summary>
            Occures when a client connected.
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Client.TCPClient.ClientReceivedPacket">
            <summary>
            Occures when a packet is received.
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Managed.ManagedServer.ServerReceivedManagedPacket">
            <summary>
            Occures when a packet is received.
            </summary>
        </member>
        <member name="T:Arrowgene.Services.Network.TCP.Managed.ManagedPacket">
            <summary>
            Class to manage packet content
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Managed.ManagedPacket.Id">
            <summary>
            Id to identify the packet
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Managed.ManagedPacket.Object">
            <summary>
            Transfered Object
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.TCP.Managed.ManagedPacket.GetObject``1">
            <summary>
            Returns concrete class or value
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Arrowgene.Services.Network.TCP.Server.TCPServer.#ctor(System.Net.IPAddress,System.Int32,Arrowgene.Services.Logging.Logger)">
            <summary>
            Creates a new <see cref="T:Arrowgene.Services.Network.TCP.Server.TCPServer"/> instance with a specified <see cref="!:ISerializer"/> serializer and <see cref="P:Arrowgene.Services.Network.TCP.Server.TCPServer.Logger"/>.
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="serializer"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Arrowgene.Services.Network.TCP.Server.TCPServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new <see cref="T:Arrowgene.Services.Network.TCP.Server.TCPServer"/> instance.
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Server.TCPServer.IPv4v6AgnosticSocket">
            <summary>
            Enables measures to achieve an IPv4/IPv6 agnostic socket.
            Binds <see cref="T:System.Net.Sockets.Socket"/> always automatically to <see cref="F:System.Net.IPAddress.IPv6Any"/>. 
            Sets the <see cref="T:System.Net.Sockets.SocketOptionLevel"/>(27) "USE_IPV6_ONLY" to false.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Server.TCPServer.Logger">
            <summary>
            Current logging instance where logs get written to.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Server.TCPServer.IsListening">
            <summary>
            Server status.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Server.TCPServer.IPAddress">
            <summary>
            Servers <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Server.TCPServer.Port">
            <summary>
            Servers port.
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.TCP.Server.TCPServer.MaxClientCount">
            <summary>
            Maximum number of active Clients
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Server.TCPServer.ClientDisconnected">
            <summary>
            Occures when a client disconnected.
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Server.TCPServer.ClientConnected">
            <summary>
            Occures when a client connected.
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.TCP.Server.TCPServer.ServerReceivedPacket">
            <summary>
            Occures when a packet is received.
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.TCP.Server.TCPServer.Start">
            <summary>
            Start accepting connections,
            Creates a new <see cref="T:Arrowgene.Services.Logging.Logger"/> instance if none is set.
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.TCP.Server.TCPServer.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="T:Arrowgene.Services.Network.UDP.UDPSocket">
            <summary>
            Class for handling udp sending and receiving of packets.
            Call <see cref="M:Arrowgene.Services.Network.UDP.UDPSocket.StartReceive"/> before sending any data, to be able to receive a response.
            If you act as a server with <see cref="M:Arrowgene.Services.Network.UDP.UDPSocket.StartListen(System.Net.IPEndPoint)"/>, there is no need to call <see cref="M:Arrowgene.Services.Network.UDP.UDPSocket.StartReceive"/>
            </summary>
        </member>
        <member name="F:Arrowgene.Services.Network.UDP.UDPSocket.MAX_PAYLOAD_SIZE_BYTES">
            <summary>
            Defines the maximum size to be received or send,
            drops requests exceeding this limit.
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Arrowgene.Services.Network.UDP.UDPSocket"/>
            </summary>
        </member>
        <member name="E:Arrowgene.Services.Network.UDP.UDPSocket.ReceivedPacket">
            <summary>
            Occurs when data is received
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.StartListen(System.Net.IPEndPoint)">
            <summary>
            Listen for incomming data and start receiving
            </summary>
            <param name="remoteEP"></param>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.Send(System.Byte[],System.Net.EndPoint)">
            <summary>
            Send data to an destination
            </summary>
            <param name="buffer"></param>
            <param name="remoteEP"></param>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.SendBroadcast(System.Byte[],System.Int32)">
            <summary>
            Send data as broadcast.
            </summary>
            <param name="buffer"></param>
            <param name="port"></param>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.StartReceive">
            <summary>
            Starts receiving data
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.StopReceive">
            <summary>
            Stops receiving any data
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.UDP.UDPSocket.Dispose">
            <summary>
            Releases all ressources
            </summary>
        </member>
        <member name="T:Arrowgene.Services.Network.PortScan.PortScanner">
            <summary>
            Scan for open ports.
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.PortScan.PortScanner.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new PortScan.
            </summary>
            <param name="connections">Simultaneous connections</param>
            <param name="timeoutMs">Time to wait for a response, before a port counts as closed</param>
        </member>
        <member name="E:Arrowgene.Services.Network.PortScan.PortScanner.PortScanCompleted">
            <summary>
            Scan Completed
            </summary>
        </member>
        <member name="P:Arrowgene.Services.Network.PortScan.PortScanner.Connections">
            <summary>
            Simultaneous connections.
            </summary>
        </member>
        <member name="M:Arrowgene.Services.Network.PortScan.PortScanner.Scan(System.Net.IPAddress,System.UInt16,System.UInt16)">
            <summary>
            Scan a given <see cref="T:System.Net.IPAddress"/> for a port range.
            </summary>
            <param name="ipAddress"></param>
            <param name="startPort"></param>
            <param name="endPort"></param>
        </member>
        <member name="M:Arrowgene.Services.Network.PortScan.PortScanner.Scan(System.Collections.Generic.List{System.Net.IPAddress},System.UInt16)">
            <summary>
            Scan a pool of <see cref="T:System.Net.IPAddress"/> for a port.
            </summary>
            <param name="ipAddressPool"></param>
            <param name="port"></param>
        </member>
    </members>
</doc>
